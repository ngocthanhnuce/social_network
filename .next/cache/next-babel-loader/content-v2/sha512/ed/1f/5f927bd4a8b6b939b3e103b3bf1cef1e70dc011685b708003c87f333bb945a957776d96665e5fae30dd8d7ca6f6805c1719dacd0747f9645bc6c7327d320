{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\social\\\\social_network\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @ts-nocheck\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport baseUrl from \"../utils/baseUrl\";\nimport CreatePost from \"../components/Post/CreatePost\";\nimport CardPost from \"../components/Post/CardPost\";\nimport { Segment } from \"semantic-ui-react\";\nimport { parseCookies } from \"nookies\";\nimport { NoPosts } from \"../components/Layout/NoData\";\nimport { PostDeleteToastr } from \"../components/Layout/Toastr\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { EndMessage, PlaceHolderPosts } from \"../components/Layout/PlaceHolderGroup\";\nimport cookie from \"js-cookie\";\nimport getUserInfo from \"../utils/getUserInfo\";\nimport MessageNotificationModal from \"../components/Home/MessageNotificationModal\";\nimport newMsgSound from \"../utils/newMsgSound\";\nimport NotificationPortal from \"../components/Home/NotificationPortal\";\n\nfunction Index({\n  user,\n  postsData,\n  errorLoading\n}) {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(postsData || []);\n  const {\n    0: showToastr,\n    1: setShowToastr\n  } = useState(false);\n  const {\n    0: hasMore,\n    1: setHasMore\n  } = useState(true);\n  const {\n    0: pageNumber,\n    1: setPageNumber\n  } = useState(2);\n  const socket = useRef();\n  const {\n    0: newMessageReceived,\n    1: setNewMessageReceived\n  } = useState(null);\n  const {\n    0: newMessageModal,\n    1: showNewMessageModal\n  } = useState(false);\n  const {\n    0: newNotification,\n    1: setNewNotification\n  } = useState(null);\n  const {\n    0: notificationPopup,\n    1: showNotificationPopup\n  } = useState(false);\n  useEffect(() => {\n    if (!socket.current) {\n      socket.current = io(baseUrl);\n    }\n\n    if (socket.current) {\n      socket.current.emit(\"join\", {\n        userId: user._id\n      });\n      socket.current.on(\"newMsgReceived\", async ({\n        newMsg\n      }) => {\n        const {\n          name,\n          profilePicUrl\n        } = await getUserInfo(newMsg.sender);\n\n        if (user.newMessagePopup) {\n          setNewMessageReceived(_objectSpread(_objectSpread({}, newMsg), {}, {\n            senderName: name,\n            senderProfilePic: profilePicUrl\n          }));\n          showNewMessageModal(true);\n        }\n\n        newMsgSound(name);\n      });\n    }\n\n    document.title = `Welcome, ${user.name.split(\" \")[0]}`;\n    return () => {\n      if (socket.current) {\n        socket.current.emit(\"disconnect\");\n        socket.current.off();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\n  }, [showToastr]);\n\n  const fetchDataOnScroll = async () => {\n    try {\n      const res = await axios.get(`${baseUrl}/api/posts`, {\n        headers: {\n          Authorization: cookie.get(\"token\")\n        },\n        params: {\n          pageNumber\n        }\n      });\n      if (res.data.length === 0) setHasMore(false);\n      setPosts(prev => [...prev, ...res.data]);\n      setPageNumber(prev => prev + 1);\n    } catch (error) {\n      alert(\"Error fetching Posts\");\n    }\n  };\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\"newNotificationReceived\", ({\n        name,\n        profilePicUrl,\n        username,\n        postId\n      }) => {\n        setNewNotification({\n          name,\n          profilePicUrl,\n          username,\n          postId\n        });\n        showNotificationPopup(true);\n      });\n    }\n  }, []);\n  return __jsx(React.Fragment, null, notificationPopup && newNotification !== null && __jsx(NotificationPortal, {\n    newNotification: newNotification,\n    notificationPopup: notificationPopup,\n    showNotificationPopup: showNotificationPopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }), showToastr && __jsx(PostDeleteToastr, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 22\n    }\n  }), newMessageModal && newMessageReceived !== null && __jsx(MessageNotificationModal, {\n    socket: socket,\n    showNewMessageModal: showNewMessageModal,\n    newMessageModal: newMessageModal,\n    newMessageReceived: newMessageReceived,\n    user: user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, __jsx(CreatePost, {\n    user: user,\n    setPosts: setPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), posts.length === 0 || errorLoading ? __jsx(NoPosts, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }) : __jsx(InfiniteScroll, {\n    hasMore: hasMore,\n    next: fetchDataOnScroll,\n    loader: __jsx(PlaceHolderPosts, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }\n    }),\n    endMessage: __jsx(EndMessage, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 25\n      }\n    }),\n    dataLength: posts.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, posts.map(post => __jsx(CardPost, {\n    socket: socket,\n    key: post._id,\n    post: post,\n    user: user,\n    setPosts: setPosts,\n    setShowToastr: setShowToastr,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  })))));\n}\n\nIndex.getInitialProps = async ctx => {\n  try {\n    const {\n      token\n    } = parseCookies(ctx);\n    const res = await axios.get(`${baseUrl}/api/posts`, {\n      headers: {\n        Authorization: token\n      },\n      params: {\n        pageNumber: 1\n      }\n    });\n    return {\n      postsData: res.data\n    };\n  } catch (error) {\n    return {\n      errorLoading: true\n    };\n  }\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/Admin/Documents/social/social_network/pages/index.js"],"names":["React","useEffect","useRef","useState","io","axios","baseUrl","CreatePost","CardPost","Segment","parseCookies","NoPosts","PostDeleteToastr","InfiniteScroll","EndMessage","PlaceHolderPosts","cookie","getUserInfo","MessageNotificationModal","newMsgSound","NotificationPortal","Index","user","postsData","errorLoading","posts","setPosts","showToastr","setShowToastr","hasMore","setHasMore","pageNumber","setPageNumber","socket","newMessageReceived","setNewMessageReceived","newMessageModal","showNewMessageModal","newNotification","setNewNotification","notificationPopup","showNotificationPopup","current","emit","userId","_id","on","newMsg","name","profilePicUrl","sender","newMessagePopup","senderName","senderProfilePic","document","title","split","off","setTimeout","fetchDataOnScroll","res","get","headers","Authorization","params","data","length","prev","error","alert","username","postId","map","post","getInitialProps","ctx","token"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport axios from \"axios\";\nimport baseUrl from \"../utils/baseUrl\";\nimport CreatePost from \"../components/Post/CreatePost\";\nimport CardPost from \"../components/Post/CardPost\";\nimport { Segment } from \"semantic-ui-react\";\nimport { parseCookies } from \"nookies\";\nimport { NoPosts } from \"../components/Layout/NoData\";\nimport { PostDeleteToastr } from \"../components/Layout/Toastr\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport {\n  EndMessage, PlaceHolderPosts,\n} from \"../components/Layout/PlaceHolderGroup\";\nimport cookie from \"js-cookie\";\nimport getUserInfo from \"../utils/getUserInfo\";\nimport MessageNotificationModal from \"../components/Home/MessageNotificationModal\";\nimport newMsgSound from \"../utils/newMsgSound\";\nimport NotificationPortal from \"../components/Home/NotificationPortal\";\n\nfunction Index({ user, postsData, errorLoading }) {\n  const [posts, setPosts] = useState(postsData || []);\n  const [showToastr, setShowToastr] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n\n  const [pageNumber, setPageNumber] = useState(2);\n\n  const socket = useRef();\n\n  const [newMessageReceived, setNewMessageReceived] = useState(null);\n  const [newMessageModal, showNewMessageModal] = useState(false);\n\n  const [newNotification, setNewNotification] = useState(null);\n  const [notificationPopup, showNotificationPopup] = useState(false);\n\n  useEffect(() => {\n    if (!socket.current) {\n      socket.current = io(baseUrl);\n    }\n\n    if (socket.current) {\n      socket.current.emit(\"join\", { userId: user._id });\n\n      socket.current.on(\"newMsgReceived\", async ({ newMsg }) => {\n        const { name, profilePicUrl } = await getUserInfo(newMsg.sender);\n\n        if (user.newMessagePopup) {\n          setNewMessageReceived({\n            ...newMsg,\n            senderName: name,\n            senderProfilePic: profilePicUrl,\n          });\n          showNewMessageModal(true);\n        }\n        newMsgSound(name);\n      });\n    }\n\n    document.title = `Welcome, ${user.name.split(\" \")[0]}`;\n\n    return () => {\n      if (socket.current) {\n        socket.current.emit(\"disconnect\");\n        socket.current.off();\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    showToastr && setTimeout(() => setShowToastr(false), 3000);\n  }, [showToastr]);\n\n  const fetchDataOnScroll = async () => {\n    try {\n      const res = await axios.get(`${baseUrl}/api/posts`, {\n        headers: { Authorization: cookie.get(\"token\") },\n        params: { pageNumber },\n      });\n\n      if (res.data.length === 0) setHasMore(false);\n\n      setPosts((prev) => [...prev, ...res.data]);\n      setPageNumber((prev) => prev + 1);\n    } catch (error) {\n      alert(\"Error fetching Posts\");\n    }\n  };\n\n  useEffect(() => {\n    if (socket.current) {\n      socket.current.on(\n        \"newNotificationReceived\",\n        ({ name, profilePicUrl, username, postId }) => {\n          setNewNotification({ name, profilePicUrl, username, postId });\n\n          showNotificationPopup(true);\n        }\n      );\n    }\n  }, []);\n\n  return (\n    <>\n      {notificationPopup && newNotification !== null && (\n        <NotificationPortal\n          newNotification={newNotification}\n          notificationPopup={notificationPopup}\n          showNotificationPopup={showNotificationPopup}\n        />\n      )}\n\n      {showToastr && <PostDeleteToastr />}\n\n      {newMessageModal && newMessageReceived !== null && (\n        <MessageNotificationModal\n          socket={socket}\n          showNewMessageModal={showNewMessageModal}\n          newMessageModal={newMessageModal}\n          newMessageReceived={newMessageReceived}\n          user={user}\n        />\n      )}\n\n      <Segment>\n        <CreatePost user={user} setPosts={setPosts} />\n\n        {posts.length === 0 || errorLoading ? (\n          <NoPosts />\n        ) : (\n          <InfiniteScroll\n            hasMore={hasMore}\n            next={fetchDataOnScroll}\n            loader={<PlaceHolderPosts />}\n            endMessage={<EndMessage />}\n            dataLength={posts.length}\n          >\n            {posts.map((post) => (\n              <CardPost\n                socket={socket}\n                key={post._id}\n                post={post}\n                user={user}\n                setPosts={setPosts}\n                setShowToastr={setShowToastr}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </Segment>\n    </>\n  );\n}\n\nIndex.getInitialProps = async (ctx) => {\n  try {\n    const { token } = parseCookies(ctx);\n\n    const res = await axios.get(`${baseUrl}/api/posts`, {\n      headers: { Authorization: token },\n      params: { pageNumber: 1 },\n    });\n\n    return { postsData: res.data };\n  } catch (error) {\n    return { errorLoading: true };\n  }\n};\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}