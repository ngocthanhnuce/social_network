{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Documents\\\\social\\\\social_network\\\\components\\\\Post\\\\CropImageModal.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from \"react\";\nimport { Modal, Header, Button, Grid, Icon } from \"semantic-ui-react\";\nimport Cropper from \"react-cropper\";\n\nfunction CropImageModal(_ref) {\n  _s();\n\n  var mediaPreview = _ref.mediaPreview,\n      setMedia = _ref.setMedia,\n      showModal = _ref.showModal,\n      setShowModal = _ref.setShowModal;\n\n  var _useState = useState(),\n      cropper = _useState[0],\n      setCropper = _useState[1];\n\n  var getCropData = function getCropData() {\n    if (cropper) {\n      setMedia(cropper.getCroppedCanvas().toDataURL());\n      cropper.destroy();\n    }\n\n    setShowModal(false);\n  };\n\n  useEffect(function () {\n    window.addEventListener(\"keydown\", function (_ref2) {\n      var key = _ref2.key;\n\n      if (cropper) {\n        if (key === \"m\") cropper.setDragMode(\"move\");\n        if (key === \"c\") cropper.setDragMode(\"crop\");\n        if (key === \"r\") cropper.reset();\n      }\n    });\n  }, [cropper]);\n  return __jsx(React.Fragment, null, __jsx(Modal, {\n    closeOnDimmerClick: false,\n    size: \"large\",\n    onClose: function onClose() {\n      return setShowModal(false);\n    },\n    open: showModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, __jsx(Modal.Header, {\n    content: \"Crop image before upload\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }), __jsx(Grid, {\n    columns: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, __jsx(Modal.Content, {\n    image: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }, __jsx(Cropper, {\n    style: {\n      height: \"400px\",\n      width: \"100%\"\n    },\n    cropBoxResizable: true,\n    zoomable: true,\n    highlight: true,\n    responsive: true,\n    guides: true,\n    dragMode: \"move\",\n    initialAspectRatio: 1,\n    preview: \".img-preview\",\n    src: mediaPreview,\n    viewMode: 1,\n    minCropBoxHeight: 10,\n    minContainerWidth: 10,\n    background: false,\n    autoCropArea: 1,\n    checkOrientation: false,\n    onInitialized: function onInitialized(cropper) {\n      return setCropper(cropper);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  }))), __jsx(Grid.Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(Modal.Content, {\n    image: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, __jsx(Header, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: \"file image outline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }), __jsx(Header.Content, {\n    content: \"Final\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"300px\",\n      display: \"inline-block\",\n      padding: \"10px\",\n      overflow: \"hidden\",\n      boxSizing: \"border-box\"\n    },\n    className: \"img-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }\n  })))))), __jsx(Modal.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    title: \"Reset (R)\",\n    icon: \"redo\",\n    circular: true,\n    onClick: function onClick() {\n      return cropper && cropper.reset();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    title: \"Move Canvas (M)\",\n    icon: \"move\",\n    circular: true,\n    onClick: function onClick() {\n      return cropper && cropper.setDragMode(\"move\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    title: \"New Cropbox (C)\",\n    icon: \"crop\",\n    circular: true,\n    onClick: function onClick() {\n      return cropper && cropper.setDragMode(\"crop\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    negative: true,\n    content: \"Cancel\",\n    icon: \"cancel\",\n    onClick: function onClick() {\n      return setShowModal(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    content: \"Crop Image\",\n    icon: \"checkmark\",\n    positive: true,\n    onClick: getCropData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 11\n    }\n  }))));\n}\n\n_s(CropImageModal, \"lJnPyffWBDnCX4yXEoIWNMYHUMk=\");\n\n_c = CropImageModal;\nexport default CropImageModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CropImageModal\");","map":{"version":3,"sources":["C:/Users/Admin/Documents/social/social_network/components/Post/CropImageModal.js"],"names":["React","useState","useEffect","Modal","Header","Button","Grid","Icon","Cropper","CropImageModal","mediaPreview","setMedia","showModal","setShowModal","cropper","setCropper","getCropData","getCroppedCanvas","toDataURL","destroy","window","addEventListener","key","setDragMode","reset","height","width","display","padding","overflow","boxSizing"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Modal, Header, Button, Grid, Icon } from \"semantic-ui-react\";\nimport Cropper from \"react-cropper\";\n\nfunction CropImageModal({ mediaPreview, setMedia, showModal, setShowModal }) {\n  const [cropper, setCropper] = useState();\n\n  const getCropData = () => {\n    if (cropper) {\n      setMedia(cropper.getCroppedCanvas().toDataURL());\n      cropper.destroy();\n    }\n\n    setShowModal(false);\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", ({ key }) => {\n      if (cropper) {\n        if (key === \"m\") cropper.setDragMode(\"move\");\n        if (key === \"c\") cropper.setDragMode(\"crop\");\n        if (key === \"r\") cropper.reset();\n      }\n    });\n  }, [cropper]);\n\n  return (\n    <>\n      <Modal\n        closeOnDimmerClick={false}\n        size=\"large\"\n        onClose={() => setShowModal(false)}\n        open={showModal}\n      >\n        <Modal.Header content=\"Crop image before upload\" />\n\n        <Grid columns={2}>\n          <Grid.Column>\n            <Modal.Content image>\n              <Cropper\n                style={{ height: \"400px\", width: \"100%\" }}\n                cropBoxResizable\n                zoomable\n                highlight\n                responsive\n                guides\n                dragMode=\"move\"\n                initialAspectRatio={1}\n                preview=\".img-preview\"\n                src={mediaPreview}\n                viewMode={1}\n                minCropBoxHeight={10}\n                minContainerWidth={10}\n                background={false}\n                autoCropArea={1}\n                checkOrientation={false}\n                onInitialized={cropper => setCropper(cropper)}\n              />\n            </Modal.Content>\n          </Grid.Column>\n\n          <Grid.Column>\n            <Modal.Content image>\n              <div>\n                <Header as=\"h2\">\n                  <Icon name=\"file image outline\" />\n                  <Header.Content content=\"Final\" />\n                </Header>\n\n                <div>\n                  <div\n                    style={{\n                      width: \"100%\",\n                      height: \"300px\",\n                      display: \"inline-block\",\n                      padding: \"10px\",\n                      overflow: \"hidden\",\n                      boxSizing: \"border-box\"\n                    }}\n                    className=\"img-preview\"\n                  />\n                </div>\n              </div>\n            </Modal.Content>\n          </Grid.Column>\n        </Grid>\n\n        <Modal.Actions>\n          <Button\n            title=\"Reset (R)\"\n            icon=\"redo\"\n            circular\n            onClick={() => cropper && cropper.reset()}\n          />\n\n          <Button\n            title=\"Move Canvas (M)\"\n            icon=\"move\"\n            circular\n            onClick={() => cropper && cropper.setDragMode(\"move\")}\n          />\n\n          <Button\n            title=\"New Cropbox (C)\"\n            icon=\"crop\"\n            circular\n            onClick={() => cropper && cropper.setDragMode(\"crop\")}\n          />\n\n          <Button\n            negative\n            content=\"Cancel\"\n            icon=\"cancel\"\n            onClick={() => setShowModal(false)}\n          />\n\n          <Button content=\"Crop Image\" icon=\"checkmark\" positive onClick={getCropData} />\n        </Modal.Actions>\n      </Modal>\n    </>\n  );\n}\n\nexport default CropImageModal;\n"]},"metadata":{},"sourceType":"module"}